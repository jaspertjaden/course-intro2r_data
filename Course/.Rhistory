?rmarkdown::html_document
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("weatherData")
knit_with_parameters('~/OneDrive/materials/bookdown/Markdown/week3.rmd')
## install if needed and load packages
install.packages("tidyverse")
library("tidyverse")
# import data
students <- readxl::read_excel("data/students.xlsx")
### dropping columns, only keeping some
report <- students %>% dplyr::select(sex, faculty, term)
# drop rows (i.e. observations or "cases")
report <- report %>% dplyr::filter(term<=6, faculty %in%
c("Political Science", "Sociology"))
# now get the sex distribution by faculty
library(janitor) # make sure it is installed before
report %>% tabyl(faculty, sex) %>% adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
# now get the sex distribution by faculty
library(janitor) # make sure it is installed before
report %>% tabyl(faculty, sex) %>% adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
# sort rows
report <- report %>% arrange(term)
# change order of columns
report <- report %>% select(faculty, sex, term)
# pull just one or two variables to the front
students <- students %>% select(faculty, sex, everything())
# kick out only specific variables
students <- students %>% select(everything(), -workingclass)
# kick out only specific variables
students <- students %>% select(everything(), -workingclass)
# get the mean life satisfaction
students %>% mean(lifesat)
# convert life satisfaction from character to numeric
students <- students %>% mutate(lifesat = as.numeric(lifesat))
glimpse(students)
# Rename variable "cob" into "country"
students <- students %>% mutate(country = cob)
# Replace a character value and give variable new name: Change "UK" into "United Kingdom"
table(students$cob)
students <- students %>% mutate(country = case_when(cob=="UK" ~ "United Kingdom",
TRUE ~ country))
table(students$country)
# check what term is
table(students$term)
class(students$term)
# Change "term" values to start at 1 not 0, give it new name
students <- students %>% mutate(term1 =as.numeric(term) + 1)
summary(students$term1)
table(students$term, students$term1)
# let's look at the age variable
summary(students$age)
class(students$age)
# Creating age category variable
students <- students %>% mutate(age_category = case_when(
age >= 18 & age <=25 ~ 1,
age >25 & age<=30 ~ 2,
age >30 ~ 3,
TRUE ~ NA_real_))
table(students$age_category, students$age, useNA = "ifany")
# let's look at the age variable
summary(students$age)
class(students$age)
# Creating age category variable
students <- students %>% mutate(age_category = case_when(
age >= 18 & age <=25 ~ 1,
age >25 & age<=30 ~ 2,
age >30 ~ 3,
TRUE ~ NA_real_))
table(students$age_category, students$age, useNA = "ifany")
table(students$age_category, students$age, useNA = "ifany")
# we can do this more efficiently
students <- students %>% mutate(lifesat = as.numeric(lifesat),
country = cob,
country= case_when(cob=="UK" ~ "United Kingdom",
TRUE ~ country),
term1 = as.numeric(term) + 1,
age_category = case_when(
age >= 18 & age <=25 ~ 1,
age >25 & age<=30 ~ 2,
age >30 ~ 3,
TRUE ~ NA_real_))
# let's look at students grade point average in 2010 (gpa)
summary(students$gpa_2010)
#hhmm...doesn't work.
#let's check what type of variable it is
str(students)
# ok - it is a character. We need to convert it. We know how to do that.
students <- students %>% mutate(gpa_2010 = as.numeric(gpa_2010))
str(students)
summary(students$gpa_2010)
# This gives you the mean for all observations
mean(students$gpa_2010, na.rm = TRUE)
# this does the same thing in a "tidyverse" framework which we have been using
students %>% summarise(mean = mean(gpa_2010, na.rm = TRUE))
# now, let's group this by "course" and get the mean by course
students %>% group_by(course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE))
# let's sort it
students %>% group_by(course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE)) %>%
arrange(mean)
# This gives you the mean for all observations
mean(students$gpa_2010, na.rm = TRUE)
# this does the same thing in a "tidyverse" framework which we have been using
students %>% summarise(mean = mean(gpa_2010, na.rm = TRUE))
# now, let's group this by "course" and get the mean by course
students %>% group_by(course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE))
# let's sort it
students %>% group_by(course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE)) %>%
arrange(mean)
course_grade <- students %>% group_by(course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE)) %>%
arrange(mean)
course_grade <- students %>% group_by(course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE)) %>%
arrange(mean)
course_grade <- students %>% group_by(faculty, course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE)) %>%
arrange(mean)
course_grade <- students %>% group_by(faculty, course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE)) %>%
arrange(mean)
# add number of observations by course
course_grade <- students %>% group_by(faculty, course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE),
obs = n()) %>%
arrange(mean)
# add number of observations by course
course_grade <- students %>% group_by(faculty, course) %>%
summarise(mean = mean(gpa_2010, na.rm = TRUE),
obs = n()) %>%
arrange(mean)
### compare grades by course, by faculty and overall
# let's keep only relevant columns
compare_grades <- students %>% dplyr::select(faculty, course, gpa_2010)
# let's create a new variable containing the mean grade in 2010 for all students
compare_grades <- compare_grades %>%
mutate(overall_mean = mean(gpa_2010,na.rm = TRUE))
# let's create a new variable with the average by faculty
compare_grades <- compare_grades %>% group_by(faculty) %>%
mutate(faculty_mean = mean(gpa_2010,na.rm = TRUE))
# let's create a new variable with the average by course
compare_grades <- compare_grades %>% group_by(course) %>%
mutate(course_mean = mean(gpa_2010,na.rm = TRUE))
# now let's summarize the dataset
compare_grades <- compare_grades %>% group_by(faculty, course) %>%
summarize(obs = n(),
faculty_mean= mean(faculty_mean),
course_mean= mean(course_mean),
overall_mean = mean(overall_mean))
### compare grades by course, by faculty and overall
# let's keep only relevant columns
compare_grades <- students %>% dplyr::select(faculty, course, gpa_2010)
# let's create a new variable containing the mean grade in 2010 for all students
compare_grades <- compare_grades %>%
mutate(overall_mean = mean(gpa_2010,na.rm = TRUE))
# let's create a new variable with the average by faculty
compare_grades <- compare_grades %>% group_by(faculty) %>%
mutate(faculty_mean = mean(gpa_2010,na.rm = TRUE))
# let's create a new variable with the average by course
compare_grades <- compare_grades %>% group_by(course) %>%
mutate(course_mean = mean(gpa_2010,na.rm = TRUE))
# now let's summarize the dataset
compare_grades <- compare_grades %>% group_by(faculty, course) %>%
summarize(obs = n(),
faculty_mean= mean(faculty_mean),
course_mean= mean(course_mean),
overall_mean = mean(overall_mean))
# condense code:
compare_grades <- students %>% dplyr::select(faculty, course, gpa_2010) %>%
mutate(overall_mean = mean(gpa_2010,na.rm = TRUE)) %>%
group_by(faculty) %>%
mutate(faculty_mean = mean(gpa_2010,na.rm = TRUE)) %>%
ungroup() %>%
group_by(course) %>%
mutate(course_mean = mean(gpa_2010,na.rm = TRUE)) %>%
ungroup() %>%
group_by(faculty, course) %>%
summarise(
obs = n(),
faculty_mean= mean(faculty_mean),
course_mean= mean(course_mean),
overall_mean = mean(overall_mean))
# condense code:
compare_grades <- students %>% dplyr::select(faculty, course, gpa_2010) %>%
mutate(overall_mean = mean(gpa_2010,na.rm = TRUE)) %>%
group_by(faculty) %>%
mutate(faculty_mean = mean(gpa_2010,na.rm = TRUE)) %>%
ungroup() %>%
group_by(course) %>%
mutate(course_mean = mean(gpa_2010,na.rm = TRUE)) %>%
ungroup() %>%
group_by(faculty, course) %>%
summarise(
obs = n(),
faculty_mean= mean(faculty_mean),
course_mean= mean(course_mean),
overall_mean = mean(overall_mean))
# clear all
rm(list = ls())
# install & load required packages
install.packages("tidyverse")
library("tidyverse")
# load all excel files
students <- readxl::read_excel("data/students.xlsx")
courses <- readxl::read_excel("data/course.xlsx")
faculty <- readxl::read_excel("data/faculty.xlsx")
install.packages("tidyverse")
# clear all
rm(list = ls())
# install & load required packages
# install.packages("tidyverse")
library("tidyverse")
# load all excel files
students <- readxl::read_excel("data/students.xlsx")
courses <- readxl::read_excel("data/course.xlsx")
faculty <- readxl::read_excel("data/faculty.xlsx")
#let's check ID variables
unique(students$faculty)
unique(faculty$faculty)
# same in "tidyverse" grammar
students %>% distinct(faculty)
# let's see how the "merge" function works and then apply it
help(merge)
mergeddata <- merge(students, faculty)
glimpse(mergeddata)
#Let's check why there are less obs in the new data
table(faculty$faculty)
table(faculty$faculty, useNA = "ifany")
# now check student dataset
table(students$faculty)
table(students$faculty, useNA = "ifany")
# here is another way to look at missing values in a column
is.na(students$faculty)
sum(is.na(students$faculty))
#Let's check why there are less obs in the new data
table(faculty$faculty)
table(faculty$faculty, useNA = "ifany")
# now check student dataset
table(students$faculty)
table(students$faculty, useNA = "ifany")
# here is another way to look at missing values in a column
is.na(students$faculty)
sum(is.na(students$faculty))
# let's specify which obs we want to keep
?merge
mergeddata <- merge(students, faculty, all=TRUE)
# let's specify which obs we want to keep
?merge
mergeddata <- merge(students, faculty, all=TRUE)
# import new student data
students2 <- readxl::read_excel("data/students2.xlsx")
# check data structures
str(students)
str(students2)
# now append (add rows) and save new dataset
studentsnew <- bind_rows(students, students2)
# first, let's see how the function works
?pivot_longer
# convert from wide to long
students_long <- studentsnew %>%
pivot_longer(
cols = 5:15,
names_to = "year",
values_to = "grade",
values_drop_na = FALSE)
# another way to specify the columns
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE)
# calculate average student grades by year
students_long <- students_long %>% group_by(year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# let's check whether this worked (I did not :-( )
students_long %>% summary(mean_grade)
# why not?
# let's re-run previous
students_long <- studentsnew %>% pivot_longer(
cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE)
# let's see what kind of variable is
str(students_long)
# let's convert "grade" into a numeric variable, actually, let's do it in the same command:
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE) %>%
mutate(grade = as.numeric(grade))
# it worked!
str(students_long)
# now, let's get the mean, still in the same command
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE) %>%
mutate(grade = as.numeric(grade)) %>%
group_by(year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# actually, let's the mean also by faculty and sex
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE) %>%
mutate(grade = as.numeric(grade)) %>%
group_by(faculty, sex, year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# now convert back to wide format
help("pivot_wider")
students_wide <- students_long %>%pivot_wider(names_from = "year",
values_from = "mean_grade")
# great, now we can merge this into the full student data
# careful - more than one id variable
full <- merge(studentsnew, students_wide, all=TRUE, by=c("faculty", "sex") )
# calculate average student grades by year
students_long <- students_long %>% group_by(year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# another way to specify the columns
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE)
# calculate average student grades by year
students_long <- students_long %>% group_by(year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# let's check whether this worked (I did not :-( )
students_long %>% summary(mean_grade)
# why not?
# let's re-run previous
students_long <- studentsnew %>% pivot_longer(
cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE)
# let's see what kind of variable is
str(students_long)
# let's convert "grade" into a numeric variable, actually, let's do it in the same command:
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE) %>%
mutate(grade = as.numeric(grade))
# it worked!
str(students_long)
# now, let's get the mean, still in the same command
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE) %>%
mutate(grade = as.numeric(grade)) %>%
group_by(year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# actually, let's the mean also by faculty and sex
students_long <- studentsnew %>% pivot_longer(cols = matches("gpa_"),
names_to = "year",
values_to = "grade",
values_drop_na = FALSE) %>%
mutate(grade = as.numeric(grade)) %>%
group_by(faculty, sex, year) %>%
summarise(mean_grade = mean(grade, na.rm = TRUE))
# now convert back to wide format
help("pivot_wider")
students_wide <- students_long %>%pivot_wider(names_from = "year",
values_from = "mean_grade")
# great, now we can merge this into the full student data
# careful - more than one id variable
full <- merge(studentsnew, students_wide, all=TRUE, by=c("faculty", "sex") )
library(tidyverse)
library(ggplot2)
students <- readxl::read_excel("data/students.xlsx")
courses <- readxl::read_excel("data/course.xlsx")
faculty <- readxl::read_excel("data/faculty.xlsx")
rm(list = ls())
# load required packages (make sure they are already installed!)
library("tidyverse")
library("flextable")
library("stargazer")
library("janitor")
library("gtsummary")
library("writexl")
library("knitr")
setwd("/data")
# load all excel files
setwd("data")
getwd()
setwd("data")
students <- readxl::read_excel("students.xlsx")
students <- readxl::read_excel("data/students.xlsx")
# clear all
rm(list = ls())
# load required packages (make sure they are already installed!)
library("tidyverse")
library("flextable")
library("stargazer")
library("janitor")
library("gtsummary")
library("writexl")
library("knitr")
# load all excel files
students <- readxl::read_excel("data/students.xlsx")
# convert variable types
students <- students %>%
mutate(lifesat = as.numeric(lifesat),
term = as.numeric(term))
# produce table
ttab4 <- students %>%
select(cob, sex, relationship, age,
term, lifesat, job, faculty) %>%
tbl_summary(missing= "no",
by = c("faculty"),
type = all_continuous() ~ "continuous2",
statistic = all_continuous() ~
c("{mean}","{min}","{max}"),
label = list(
cob ~ "Country of birth",
sex ~ "Sex",
relationship ~ "Relationship status",
age ~ "Age (in years)",
term ~ "# of terms",
lifesat ~ "Life satisfaction",
job ~ "Paid part-time job"
))
tab4
# produce table
tab4 <- students %>%
select(cob, sex, relationship, age,
term, lifesat, job, faculty) %>%
tbl_summary(missing= "no",
by = c("faculty"),
type = all_continuous() ~ "continuous2",
statistic = all_continuous() ~
c("{mean}","{min}","{max}"),
label = list(
cob ~ "Country of birth",
sex ~ "Sex",
relationship ~ "Relationship status",
age ~ "Age (in years)",
term ~ "# of terms",
lifesat ~ "Life satisfaction",
job ~ "Paid part-time job"
))
tab4
# clear all
rm(list = ls())
# load required packages (make sure they are already installed!)
library("tidyverse")
library("flextable")
library("stargazer")
library("janitor")
library("gtsummary")
library("writexl")
library("knitr")
# load all excel files
students <- readxl::read_excel("data/students.xlsx")
# convert variable types
students <- students %>%
mutate(lifesat = as.numeric(lifesat),
term = as.numeric(term))
# produce table
tab4 <- students %>%
select(cob, sex, relationship, age,
term, lifesat, job, faculty) %>%
tbl_summary(missing= "no",
by = c("faculty"),
type = all_continuous() ~ "continuous2",
statistic = all_continuous() ~
c("{mean}","{min}","{max}"),
label = list(
cob ~ "Country of birth",
sex ~ "Sex",
relationship ~ "Relationship status",
age ~ "Age (in years)",
term ~ "# of terms",
lifesat ~ "Life satisfaction",
job ~ "Paid part-time job"
))
tab4
